name: Release

on:
  push:
    branches:
      - '*'
    tags:
      - 'v*.*.*'

  pull_request:
    branches:
      - main

  workflow_dispatch:

jobs:
  validate-version:
    timeout-minutes: 20
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate version matches tag
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            # Extract version from tag (remove 'v' prefix if present)
            TAG_VERSION="${{ github.ref_name }}"
            TAG_VERSION="${TAG_VERSION#v}"
            
            # Extract version from package.json
            PACKAGE_VERSION=$(grep '"version"' package.json | sed 's/.*"version": *"\([^"]*\)".*/\1/')
            
            echo "Tag version: $TAG_VERSION"
            echo "Package version: $PACKAGE_VERSION"
            
            if [ "$TAG_VERSION" != "$PACKAGE_VERSION" ]; then
              echo "❌ Version mismatch!"
              echo "Git tag version: $TAG_VERSION"
              echo "package.json version: $PACKAGE_VERSION"
              echo "Please update package.json version to match the tag version."
              exit 1
            fi
            
            echo "✅ Version validation passed: $TAG_VERSION"
          else
            echo "✅ No tag detected, skipping version validation"
          fi

  unit-tests:
    timeout-minutes: 20
    runs-on: ubuntu-latest
    needs: [validate-version]
    if: always() && (needs.validate-version.result == 'success' || github.ref_type != 'tag')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.20

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-${{ runner.arch }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-bun-

      - name: Install dependencies
        run: bun install

      - name: Run unit tests
        run: bun run test

  compile:
    timeout-minutes: 20
    runs-on: ubuntu-latest
    needs: [validate-version]
    if: always() && (needs.validate-version.result == 'success' || github.ref_type != 'tag')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.20

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-${{ runner.arch }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-bun-

      - name: Install dependencies
        run: bun install

      - name: Compile TypeScript
        run: bun run compile

  build-linux:
    timeout-minutes: 20
    runs-on: ubuntu-24.04
    needs: [unit-tests, compile]
    if: always() && needs.unit-tests.result == 'success' && needs.compile.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Modify package.json for nightly builds
        if: github.ref_type != 'tag'
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(grep '"version"' package.json | sed 's/.*"version": *"\([^"]*\)".*/\1/')
          
          # Generate nightly suffix with current UTC date/time in ISO format
          NIGHTLY_TIMESTAMP=$(date -u +"%Y%m%dT%H%M%S")
          NIGHTLY_VERSION="${CURRENT_VERSION}-nightly.${NIGHTLY_TIMESTAMP}"
          
          echo "Original version: $CURRENT_VERSION"
          echo "Nightly version: $NIGHTLY_VERSION"
          
          # Update package.json with nightly version
          sed -i "s/\"version\": *\"[^\"]*\"/\"version\": \"$NIGHTLY_VERSION\"/" package.json
          
          # Verify the change
          echo "Updated package.json version:"
          grep '"version"' package.json

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.20

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-${{ runner.arch }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-bun-

      - name: Install dependencies
        run: bun install

      - name: Build Linux executable
        run: |
          bun run build-linux
          chmod +x bin/x64/linux/lacky

      - name: Test version command
        run: |
          echo "Testing version command after building..."
          ./bin/x64/linux/lacky --version

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: lacky-linux-x64
          path: ./bin/x64/linux/lacky

  build-windows:
    timeout-minutes: 20
    runs-on: windows-latest
    needs: [unit-tests, compile]
    if: always() && needs.unit-tests.result == 'success' && needs.compile.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Modify package.json for nightly builds
        if: github.ref_type != 'tag'
        shell: bash
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(grep '"version"' package.json | sed 's/.*"version": *"\([^"]*\)".*/\1/')
          
          # Generate nightly suffix with current UTC date/time in ISO format
          NIGHTLY_TIMESTAMP=$(date -u +"%Y%m%dT%H%M%S")
          NIGHTLY_VERSION="${CURRENT_VERSION}-nightly.${NIGHTLY_TIMESTAMP}"
          
          echo "Original version: $CURRENT_VERSION"
          echo "Nightly version: $NIGHTLY_VERSION"
          
          # Update package.json with nightly version
          sed -i "s/\"version\": *\"[^\"]*\"/\"version\": \"$NIGHTLY_VERSION\"/" package.json
          
          # Verify the change
          echo "Updated package.json version:"
          grep '"version"' package.json

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.20

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-${{ runner.arch }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-bun-

      - name: Install dependencies
        run: bun install

      - name: Build Windows executable
        run: bun run build-win

      - name: Test version command
        run: |
          echo "Testing version command after building..."
          ./bin/x64/win/lacky.exe --version

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: lacky-windows-x64
          path: ./bin/x64/win/lacky.exe

  build-macos-x64:
    timeout-minutes: 20
    runs-on: macos-13 # x64 architecture
    needs: [unit-tests, compile]
    if: always() && needs.unit-tests.result == 'success' && needs.compile.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Modify package.json for nightly builds
        if: github.ref_type != 'tag'
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(grep '"version"' package.json | sed 's/.*"version": *"\([^"]*\)".*/\1/')
          
          # Generate nightly suffix with current UTC date/time in ISO format
          NIGHTLY_TIMESTAMP=$(date -u +"%Y%m%dT%H%M%S")
          NIGHTLY_VERSION="${CURRENT_VERSION}-nightly.${NIGHTLY_TIMESTAMP}"
          
          echo "Original version: $CURRENT_VERSION"
          echo "Nightly version: $NIGHTLY_VERSION"
          
          # Update package.json with nightly version
          sed -i "" "s/\"version\": *\"[^\"]*\"/\"version\": \"$NIGHTLY_VERSION\"/" package.json
          
          # Verify the change
          echo "Updated package.json version:"
          grep '"version"' package.json

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.20

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-${{ runner.arch }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-bun-

      - name: Install dependencies
        run: bun install

      - name: Build macOS executable
        run: |
          bun run build-mac-x64
          chmod +x bin/x64/mac/lacky

      - name: Test version command
        run: |
          echo "Testing version command after building..."
          ./bin/x64/mac/lacky --version

      - name: Upload macOS x64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: lacky-macos-x64
          path: ./bin/x64/mac/lacky

  build-macos-arm64:
    timeout-minutes: 20
    runs-on: macos-latest # ARM64 architecture
    needs: [unit-tests, compile]
    if: always() && needs.unit-tests.result == 'success' && needs.compile.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Modify package.json for nightly builds
        if: github.ref_type != 'tag'
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(grep '"version"' package.json | sed 's/.*"version": *"\([^"]*\)".*/\1/')
          
          # Generate nightly suffix with current UTC date/time in ISO format
          NIGHTLY_TIMESTAMP=$(date -u +"%Y%m%dT%H%M%S")
          NIGHTLY_VERSION="${CURRENT_VERSION}-nightly.${NIGHTLY_TIMESTAMP}"
          
          echo "Original version: $CURRENT_VERSION"
          echo "Nightly version: $NIGHTLY_VERSION"
          
          # Update package.json with nightly version
          sed -i "" "s/\"version\": *\"[^\"]*\"/\"version\": \"$NIGHTLY_VERSION\"/" package.json
          
          # Verify the change
          echo "Updated package.json version:"
          grep '"version"' package.json

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.20

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-${{ runner.arch }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-bun-

      - name: Install dependencies
        run: bun install

      - name: Build macOS ARM64 executable
        run: |
          bun run build-mac-arm64
          chmod +x bin/arm64/mac/lacky

      - name: Test version command
        run: |
          echo "Testing version command after building..."
          ./bin/arm64/mac/lacky --version

      - name: Upload macOS ARM64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: lacky-macos-arm64
          path: ./bin/arm64/mac/lacky

  create-release:
    timeout-minutes: 20
    needs: [build-linux, build-windows, build-macos-x64, build-macos-arm64]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: lacky-linux-x64
          path: ./artifacts/linux

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: lacky-windows-x64
          path: ./artifacts/windows

      - name: Download macOS x64 artifact
        uses: actions/download-artifact@v4
        with:
          name: lacky-macos-x64
          path: ./artifacts/macos-x64

      - name: Download macOS ARM64 artifact
        uses: actions/download-artifact@v4
        with:
          name: lacky-macos-arm64
          path: ./artifacts/macos-arm64

      - name: Create compressed archives
        run: |
          cd ./artifacts/linux && chmod +x lacky && tar -czf ../lacky-linux-x64.tar.gz lacky && cd ../..
          cd ./artifacts/windows && zip ../lacky-windows-x64.zip lacky.exe && cd ../..
          cd ./artifacts/macos-x64 && chmod +x lacky && tar -czf ../lacky-macos-x64.tar.gz lacky && cd ../..
          cd ./artifacts/macos-arm64 && chmod +x lacky && tar -czf ../lacky-macos-arm64.tar.gz lacky && cd ../..

      - name: Generate release notes
        id: release-notes
        run: |
          # Get the latest non-nightly tag (excluding current tag if this is a tagged build)
          if [ "${{ github.ref_type }}" == "tag" ]; then
            # For tagged releases, get commits since the previous tag (excluding current and nightly tags)
            PREVIOUS_TAG=$(git tag --list --sort=-version:refname | grep -v "^${{ github.ref_name }}$" | grep -v "^nightly$" | head -1)
            if [ -n "$PREVIOUS_TAG" ]; then
              echo "Generating release notes for tagged release since previous tag: $PREVIOUS_TAG"
              COMMIT_RANGE="${PREVIOUS_TAG}..HEAD"
            else
              echo "No previous tag found, using all commits for tagged release"
              COMMIT_RANGE=""
            fi
          else
            # For nightly builds, get commits since the last non-nightly tag
            LAST_TAG=$(git tag --list --sort=-version:refname | grep -v "^nightly$" | head -1)
            if [ -n "$LAST_TAG" ]; then
              echo "Generating release notes for nightly build since last tag: $LAST_TAG"
              COMMIT_RANGE="${LAST_TAG}..HEAD"
            else
              echo "No previous tag found, using all commits for nightly build"
              COMMIT_RANGE=""
            fi
          fi
          
          # Get commit messages and format as bullet points
          if [ -n "$COMMIT_RANGE" ]; then
            RAW_COMMITS=$(git log --oneline --no-merges "$COMMIT_RANGE" --format="%s")
          else
            RAW_COMMITS=$(git log --oneline --no-merges --format="%s")
          fi
          
          # Format commits as bullet points
          RELEASE_NOTES=""
          if [ -n "$RAW_COMMITS" ]; then
            RELEASE_NOTES=$(echo "$RAW_COMMITS" | while IFS= read -r commit; do
              if [ -n "$commit" ]; then
                echo "- $commit"
              fi
            done)
          fi
          
          if [ -z "$RELEASE_NOTES" ]; then
            RELEASE_NOTES="- No changes found"
          fi
          
          # Save release notes to output and file
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "Generated release notes:"
          echo "$RELEASE_NOTES"

      - name: Delete existing nightly release
        if: github.ref_type != 'tag'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release delete nightly --yes --cleanup-tag || true
        continue-on-error: true

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_type == 'tag' && github.ref_name || 'nightly' }}
          name: ${{ github.ref_type == 'tag' && format('Lacky {0}', github.ref_name) || 'Lacky Nightly' }}
          draft: false
          prerelease: ${{ github.ref_type != 'tag' }}
          files: |
            ./artifacts/lacky-linux-x64.tar.gz
            ./artifacts/lacky-windows-x64.zip
            ./artifacts/lacky-macos-x64.tar.gz
            ./artifacts/lacky-macos-arm64.tar.gz
          body: |
            ${{ github.ref_type == 'tag' && format('Lacky release {0}', github.ref_name) || format('Lacky nightly build - {0}', github.sha) }}
            
            ${{ github.ref_type != 'tag' && '⚠️ **This is a nightly build and may be unstable**' || '' }}
            ${{ github.ref_type != 'tag' && format('Built from commit: {0}', github.sha) || '' }}
            
            ## What's Changed
            ${{ steps.release-notes.outputs.RELEASE_NOTES }}
            
            ## Download
            - **Linux**: `lacky-linux-x64.tar.gz`
            - **Windows**: `lacky-windows-x64.zip`
            - **macOS (Intel)**: `lacky-macos-x64.tar.gz`
            - **macOS (Apple Silicon)**: `lacky-macos-arm64.tar.gz`
            
            ## Installation
            1. Download the appropriate file for your platform
            2. Extract the archive
            3. Make the binary executable (Linux/macOS): `chmod +x lacky`
            4. Move to your PATH or run directly

